import streamlit as st
import pandas as pd
import ccxt
import backtrader as bt
from datetime import datetime, timezone
import plotly.graph_objects as go
import matplotlib

matplotlib.use('Agg')

# --- 1. –ö–ª–∞—Å—Å –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ (—Å –Ω–æ–≤—ã–º –∫–∞—Å—Ç–æ–º–Ω—ã–º –ª–æ–≥–æ–º) ---
class DcaGridStrategyFIFO(bt.Strategy):
    params = (
        ('initial_order_size', 100.0), ('safety_order_size', 100.0),
        ('price_step_percent', 2.0), ('price_step_multiplier', 1.5),
        ('safety_orders_count', 10), ('take_profit_percent', 2.0),
        ('volume_multiplier', 1.0),
        ('direction', 'Long'), ('is_futures', False), ('leverage', 1),
    )

    def __init__(self):
        self.open_orders_queue = []
        self.safety_orders_placed = 0
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –ù–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ª–æ–≥ –¥–ª—è FIFO
        self.completed_cycles = []

    def notify_order(self, order):
        if order.status != order.Completed: return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ä–¥–µ—Ä –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º (Take Profit)
        is_closing_trade = (self.p.direction == 'Long' and order.issell()) or \
                           (self.p.direction == 'Short' and order.isbuy())

        if is_closing_trade:
            if self.open_orders_queue:
                closed_order = self.open_orders_queue.pop(0)
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
                pnl = (order.executed.price - closed_order['price']) * closed_order['size']
                if self.p.direction == 'Short': pnl = -pnl # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PnL –¥–ª—è —à–æ—Ä—Ç–∞
                
                self.completed_cycles.append({
                    "–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è": bt.num2date(order.executed.dt).strftime('%Y-%m-%d %H:%M'),
                    "–ü—Ä–æ—Ñ–∏—Ç ($)": pnl,
                    "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–≤–µ—á–µ–π)": self.data.buflen() - closed_order['bar_opened'],
                })
        else: # –û—Ä–¥–µ—Ä –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏–ª–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ
            self.open_orders_queue.append({
                'price': order.executed.price,
                'size': order.executed.size,
                'bar_opened': self.data.buflen() # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–æ–º–µ—Ä —Å–≤–µ—á–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–∫—Ä—ã—Ç –æ—Ä–¥–µ—Ä
            })

    def next(self):
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
        if not self.position:
            self.safety_orders_placed = 0
            self.open_orders_queue = []
            self.start_new_cycle()
            return
            
        # –õ–æ–≥–∏–∫–∞ Take Profit –ø–æ FIFO
        if self.open_orders_queue:
            oldest_order = self.open_orders_queue[0]
            if self.p.direction == 'Long':
                take_profit_price = oldest_order['price'] * (1 + self.p.take_profit_percent / 100)
                if self.data.close[0] >= take_profit_price: self.sell(size=oldest_order['size'])
            else: # Short
                take_profit_price = oldest_order['price'] * (1 - self.p.take_profit_percent / 100)
                if self.data.close[0] <= take_profit_price: self.buy(size=oldest_order['size'])

        # –õ–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        if self.safety_orders_placed < self.p.safety_orders_count and self.open_orders_queue:
            last_order_price = self.open_orders_queue[-1]['price']
            step = self.p.price_step_percent / 100.0 * (self.p.price_step_multiplier ** self.safety_orders_placed)
            if self.p.direction == 'Long':
                next_safety_price = last_order_price * (1 - step)
                if self.data.close[0] <= next_safety_price: self.place_safety_order()
            else: # Short
                next_safety_price = last_order_price * (1 + step)
                if self.data.close[0] >= next_safety_price: self.place_safety_order()
    
    def place_safety_order(self):
        size_multiplier = self.p.volume_multiplier ** self.safety_orders_placed
        order_size = (self.p.safety_order_size * size_multiplier) / self.data.close[0]
        if self.p.direction == 'Long': self.buy(size=order_size)
        else: self.sell(size=order_size)
        self.safety_orders_placed += 1
    
    def start_new_cycle(self):
        size = self.p.initial_order_size / self.data.close[0]
        if self.p.direction == 'Long': self.buy(size=size)
        else: self.sell(size=size)

# --- 2. –§—É–Ω–∫—Ü–∏–∏ –∏ UI ---
@st.cache_data
def fetch_data(exchange_name, symbol, timeframe, start_date):
    try:
        exchange = getattr(ccxt, exchange_name)(); since = int(start_date.replace(tzinfo=timezone.utc).timestamp() * 1000)
        all_ohlcv = [];
        while True:
            ohlcv = exchange.fetch_ohlcv(symbol, timeframe, since=since, limit=1000)
            if not ohlcv: break
            all_ohlcv.extend(ohlcv); since = ohlcv[-1][0] + 1
        df = pd.DataFrame(all_ohlcv, columns=['datetime', 'open', 'high', 'low', 'close', 'volume'])
        df['datetime'] = pd.to_datetime(df['datetime'], unit='ms'); df.set_index('datetime', inplace=True); return df
    except Exception as e: st.error(f"–û—à–∏–±–∫–∞: {e}"); return None

st.set_page_config(layout="wide", initial_sidebar_state="expanded")
st.title("üìà –ì–∏–±—Ä–∏–¥–Ω—ã–π DCA/Grid –ë—ç–∫—Ç–µ—Å—Ç–µ—Ä (FIFO)")

with st.sidebar:
    st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ç–∫—Ç–µ—Å—Ç–∞")
    direction = st.radio("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", ["Long", "Short"])
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
    start_date = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", datetime(2023, 1, 1))
    end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", datetime.now())
    initial_cash = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª", value=10000.0)

    st.header("üõ†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    initial_order_size = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä ($)", value=100.0)
    safety_order_size = st.number_input("–°—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä ($)", value=100.0)
    volume_multiplier = st.number_input("–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å—É–º–º—ã", min_value=1.0, value=1.0, format="%.2f")
    safety_orders_count = st.number_input("–ú–∞–∫—Å. –∫–æ–ª-–≤–æ –°–û", min_value=1, value=20)
    price_step_percent = st.number_input("–®–∞–≥ —Ü–µ–Ω—ã (%)", min_value=0.01, value=2.0, format="%.2f")
    price_step_multiplier = st.number_input("–ú–Ω–æ–∂–∏—Ç–µ–ª—å —à–∞–≥–∞ —Ü–µ–Ω—ã", min_value=1.0, value=1.5, format="%.2f")
    take_profit_percent = st.number_input("Take profit (%)", min_value=0.01, value=2.0, format="%.2f")

if st.sidebar.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç"):
    start_datetime = datetime.combine(start_date, datetime.min.time())
    end_datetime = datetime.combine(end_date, datetime.max.time())
    with st.spinner(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."): data_df = fetch_data("okx", "BTC-USDT", "1h", start_datetime)
    if data_df is not None and not data_df.empty:
        data_df = data_df.loc[start_datetime:end_datetime]
        st.success("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        cerebro = bt.Cerebro()
        cerebro.adddata(bt.feeds.PandasData(dataname=data_df))
        
        strategy_params = {
            'initial_order_size': initial_order_size, 'safety_order_size': safety_order_size,
            'safety_orders_count': safety_orders_count, 'price_step_percent': price_step_percent,
            'price_step_multiplier': price_step_multiplier, 'take_profit_percent': take_profit_percent,
            'volume_multiplier': volume_multiplier, 'direction': direction
        }
        cerebro.addstrategy(DcaGridStrategyFIFO, **strategy_params)
        
        cerebro.broker.set_cash(initial_cash)
        cerebro.broker.setcommission(commission=0.0006)
        
        start_value = cerebro.broker.getvalue()
        results = cerebro.run()
        end_value = cerebro.broker.getvalue()
        
        st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        pnl = end_value - start_value
        pnl_percent = (pnl / start_value) * 100 if start_value > 0 else 0
        
        col1, col2, col3 = st.columns(3)
        col1.metric("–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª", f"${start_value:,.2f}")
        col2.metric("–ö–æ–Ω–µ—á–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª", f"${end_value:,.2f}", f"{pnl:,.2f} $")
        col3.metric("–ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ (%)", f"{pnl_percent:.2f}%")

        # –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –ª–æ–≥
        st.header("üìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–∏–∫–ª—ã (FIFO)")
        trade_log = results[0].completed_cycles
        if trade_log:
            log_df = pd.DataFrame(trade_log)
            st.dataframe(log_df.style.format({"–ü—Ä–æ—Ñ–∏—Ç ($)": "${:,.2f}"}))
        else:
            st.info("–ó–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –Ω–µ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞.")
