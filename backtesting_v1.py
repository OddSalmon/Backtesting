# -*- coding: utf-8 -*-
"""Backtesting v1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uXjH_sRhAYbMRKtPE-uaVypGkZ7CXoqW
"""

import streamlit as st
import pandas as pd
import ccxt
import backtrader as bt
from datetime import datetime, timezone
import matplotlib

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –†–µ—à–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å—Ä–µ–¥–µ
matplotlib.use('Agg')

# --- 1. –ö–ª–∞—Å—Å –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è Backtrader (—Å –ª–æ–≥–∏–∫–æ–π –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤) ---
class DcaGridStrategy(bt.Strategy):
    params = (
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        ('initial_order_size', 100.0),
        ('safety_order_size', 100.0),
        ('price_step_percent', 2.0),
        ('price_step_multiplier', 1.5),
        ('safety_orders_count', 10),
        ('take_profit_percent', 2.0),
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—å—é—á–µ—Ä—Å–æ–≤
        ('is_futures', False),
        ('leverage', 1),
        ('funding_rate', 0.0001), # –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è 0.01%
    )

    def __init__(self):
        self.entry_price = 0
        self.total_cost = 0
        self.total_size = 0
        self.take_profit_price = 0
        self.liquidation_price = 0
        self.safety_orders_placed = 0
        # –¢–∞–π–º–µ—Ä –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è funding'–∞ –∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤
        if self.p.is_futures:
            self.add_timer(
                when=bt.Timer.SESSION_START,
                offset=bt.timedelta(hours=8),
                repeat=bt.timedelta(hours=8)
            )

    def notify_timer(self, timer, when, *args):
        # –°–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –∑–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
        funding_fee = self.broker.get_value() * self.p.funding_rate
        self.broker.add_cash(-funding_fee)
        self.log(f'FUNDING FEE: -${funding_fee:.2f} charged.')

    def notify_order(self, order):
        if order.status in [order.Completed]:
            if order.isbuy():
                self.log(f'BUY EXECUTED: Size {order.executed.size:.4f}, Price: {order.executed.price:.2f}, Cost: {order.executed.value:.2f}')
                self.total_cost += order.executed.value
                self.total_size += order.executed.size
                self.entry_price = self.total_cost / self.total_size
                self.take_profit_price = self.entry_price * (1 + self.p.take_profit_percent / 100)
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                if self.p.is_futures:
                    self.liquidation_price = self.entry_price * (1 - (1 / self.p.leverage))
            elif order.issell():
                self.log(f'SELL EXECUTED: Size {order.executed.size:.4f}, Price: {order.executed.price:.2f}, PnL: {order.executed.pnl:.2f}')
                self.reset_cycle()

    def next(self):
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—é
        if self.p.is_futures and self.position and self.data.close[0] <= self.liquidation_price:
            self.log(f'!!! LIQUIDATION at Price: {self.data.close[0]:.2f}. Liquidation Price was: {self.liquidation_price:.2f} !!!')
            self.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ä—ã–Ω–∫—É
            self.reset_cycle()
            return

        # –õ–æ–≥–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
        if not self.position:
            self.start_new_cycle()
            return

        # –õ–æ–≥–∏–∫–∞ Take Profit
        if self.position and self.data.close[0] >= self.take_profit_price:
            self.sell(size=self.position.size)

        # –õ–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        if self.safety_orders_placed < self.p.safety_orders_count:
            step = self.p.price_step_percent / 100.0 * (self.p.price_step_multiplier ** self.safety_orders_placed)
            next_safety_price = self.entry_price * (1 - step)
            if self.data.close[0] <= next_safety_price:
                order_size = self.p.safety_order_size / self.data.close[0]
                self.buy(size=order_size)
                self.safety_orders_placed += 1

    def start_new_cycle(self):
        initial_size = self.p.initial_order_size / self.data.close[0]
        self.buy(size=initial_size)
        self.log(f'NEW CYCLE STARTED: Initial Buy @ {self.data.close[0]:.2f}')

    def reset_cycle(self):
        self.total_cost = 0
        self.total_size = 0
        self.safety_orders_placed = 0

    def log(self, txt, dt=None):
        dt = dt or self.datas[0].datetime.date(0)
        log_container.write(f'{dt.isoformat()} - {txt}')

# --- 2. –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –ü—Ä–µ—Å–µ—Ç—ã ---
@st.cache_data
def fetch_data(exchange_name, symbol, timeframe, start_date):
    try:
        exchange = getattr(ccxt, exchange_name)()
        since = int(start_date.replace(tzinfo=timezone.utc).timestamp() * 1000)
        all_ohlcv = []
        while True:
            ohlcv = exchange.fetch_ohlcv(symbol, timeframe, since=since, limit=1000)
            if not ohlcv: break
            all_ohlcv.extend(ohlcv)
            since = ohlcv[-1][0] + 1
        df = pd.DataFrame(all_ohlcv, columns=['datetime', 'open', 'high', 'low', 'close', 'volume'])
        df['datetime'] = pd.to_datetime(df['datetime'], unit='ms')
        df.set_index('datetime', inplace=True)
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤
PRESETS = {
    "okx": {
        "Spot": {"BTC/USDT": "BTC-USDT", "ETH/USDT": "ETH-USDT"},
        "Futures": {"BTC/USDT": "BTC-USDT-SWAP", "ETH/USDT": "ETH-USDT-SWAP"}
    },
    "bitmex": {
        "Spot": {}, # –£ BitMEX –Ω–µ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–ø–æ—Ç–∞ –≤ CCXT
        "Futures": {"XBT/USDT": "XBTUSDT", "ETH/USDT": "ETHUSDT"}
    }
}

# --- 3. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
st.set_page_config(layout="wide")
st.title("üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±—ç–∫—Ç–µ—Å—Ç–µ—Ä –¥–ª—è —Å–µ—Ç–æ—á–Ω–æ–π DCA-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

with st.sidebar:
    st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ç–∫—Ç–µ—Å—Ç–∞")
    exchange = st.selectbox("–ë–∏—Ä–∂–∞", list(PRESETS.keys()))
    instrument = st.selectbox("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", list(PRESETS[exchange].keys()))

    available_pairs = list(PRESETS[exchange][instrument].keys())
    if not available_pairs:
        st.warning(f"–î–ª—è {exchange} ({instrument}) –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –≤—Ä—É—á–Ω—É—é.")
        symbol_display = st.text_input("–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (—Ç–∏–∫–µ—Ä CCXT)", "BTC-USDT-SWAP")
    else:
        symbol_display = st.selectbox("–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞", available_pairs)

    symbol_ccxt = PRESETS[exchange][instrument].get(symbol_display, symbol_display)

    timeframe = st.selectbox("–¢–∞–π–º—Ñ—Ä–µ–π–º", ['1d', '4h', '1h'])
    start_date = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", datetime(2023, 1, 1))
    initial_cash = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª", value=10000.0)

    st.header("üõ†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    initial_order_size = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä ($)", value=100.0)
    safety_order_size = st.number_input("–°—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä ($)", value=100.0)
    safety_orders_count = st.number_input("Max trigger number", value=10)
    price_step_percent = st.number_input("Grid step (%)", value=2.0)
    price_step_multiplier = st.number_input("Grid step ratio (%)", value=1.5)
    take_profit_percent = st.number_input("Take Profit (%)", value=2.0)

    # –ü–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
    leverage = 1
    funding_rate = 0.0
    is_futures = (instrument == "Futures")
    if is_futures:
        st.header("üìà –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—å—é—á–µ—Ä—Å–æ–≤")
        leverage = st.slider("–ü–ª–µ—á–æ (Leverage)", 1, 100, 10)
        funding_rate = st.number_input("–°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è (%)", value=0.01, format="%.4f") / 100.0

if st.sidebar.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç"):
    start_datetime = datetime.combine(start_date, datetime.min.time())

    with st.spinner(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol_ccxt} —Å {exchange}..."):
        data_df = fetch_data(exchange, symbol_ccxt, timeframe, start_datetime)

    if data_df is not None and not data_df.empty:
        st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        data_feed = bt.feeds.PandasData(dataname=data_df)

        cerebro = bt.Cerebro()
        cerebro.adddata(data_feed)
        cerebro.addstrategy(DcaGridStrategy,
                            initial_order_size=initial_order_size,
                            safety_order_size=safety_order_size,
                            safety_orders_count=safety_orders_count,
                            price_step_percent=price_step_percent,
                            price_step_multiplier=price_step_multiplier,
                            take_profit_percent=take_profit_percent,
                            is_futures=is_futures,
                            leverage=leverage,
                            funding_rate=funding_rate
                            )

        cerebro.broker.set_cash(initial_cash)
        cerebro.broker.setcommission(commission=0.001, leverage=leverage if is_futures else None)

        st.header("üìã –õ–æ–≥ —Å–¥–µ–ª–æ–∫")
        log_container = st.expander("–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ª–æ–≥", expanded=False)

        start_value = cerebro.broker.getvalue()
        cerebro.run()
        end_value = cerebro.broker.getvalue()

        st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª", f"${start_value:,.2f}")
        with col2:
            st.metric("–ö–æ–Ω–µ—á–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª", f"${end_value:,.2f}", delta=f"${end_value - start_value:,.2f}")

        st.subheader("–ì—Ä–∞—Ñ–∏–∫")
        fig = cerebro.plot(style='candlestick', barup='green', bardown='red')[0][0]
        st.pyplot(fig)