import streamlit as st
import pandas as pd
import ccxt
from datetime import datetime, timezone

# --- 1. –ù–æ–≤—ã–π, –±—ã—Å—Ç—Ä—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ ---
def run_fast_backtest(data, params):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    direction = params['direction']
    initial_order_size = params['initial_order_size']
    safety_order_size = params['safety_order_size']
    volume_multiplier = params['volume_multiplier']
    safety_orders_count = params['safety_orders_count']
    price_step_percent = params['price_step_percent'] / 100.0
    price_step_multiplier = params['price_step_multiplier']
    take_profit_percent = params['take_profit_percent'] / 100.0

    # –°–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    open_orders = []
    completed_cycles = []
    cash = params['initial_cash']
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ –¥–Ω—è–º
    for index, row in data.iterrows():
        day_low, day_high, current_close = row['low'], row['high'], row['close']

        # --- –õ–æ–≥–∏–∫–∞ Take Profit (FIFO) ---
        if open_orders:
            oldest_order = open_orders[0]
            if direction == 'Long':
                tp_price = oldest_order['price'] * (1 + take_profit_percent)
                if day_high >= tp_price:
                    pnl = (tp_price - oldest_order['price']) * oldest_order['size_coin']
                    cash += oldest_order['size_usd'] + pnl
                    completed_cycles.append({'date': index.date(), 'pnl': pnl})
                    open_orders.pop(0)
            else: # Short
                tp_price = oldest_order['price'] * (1 - take_profit_percent)
                if day_low <= tp_price:
                    pnl = (oldest_order['price'] - tp_price) * oldest_order['size_coin']
                    cash += oldest_order['size_usd'] + pnl
                    completed_cycles.append({'date': index.date(), 'pnl': pnl})
                    open_orders.pop(0)
        
        # --- –õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ –∏ —Å—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ ---
        if not open_orders: # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π, –¥–µ–ª–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä
            entry_price = row['open'] # –í—Ö–æ–¥–∏–º –ø–æ —Ü–µ–Ω–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–Ω—è
            size_coin = initial_order_size / entry_price
            open_orders.append({'price': entry_price, 'size_coin': size_coin, 'size_usd': initial_order_size, 'so_level': 0})
            cash -= initial_order_size
        else: # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            if len(open_orders) <= safety_orders_count:
                last_order_price = open_orders[-1]['price']
                current_so_level = open_orders[-1]['so_level']
                step = price_step_percent * (price_step_multiplier ** current_so_level)

                if direction == 'Long':
                    so_price = last_order_price * (1 - step)
                    if day_low <= so_price:
                        so_size_usd = safety_order_size * (volume_multiplier ** current_so_level)
                        so_size_coin = so_size_usd / so_price
                        open_orders.append({'price': so_price, 'size_coin': so_size_coin, 'size_usd': so_size_usd, 'so_level': current_so_level + 1})
                        cash -= so_size_usd
                else: # Short
                    so_price = last_order_price * (1 + step)
                    if day_high >= so_price:
                        so_size_usd = safety_order_size * (volume_multiplier ** current_so_level)
                        so_size_coin = so_size_usd / so_price
                        open_orders.append({'price': so_price, 'size_coin': so_size_coin, 'size_usd': so_size_usd, 'so_level': current_so_level + 1})
                        cash -= so_size_usd

    # --- –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ "–∑–∞—Å—Ç—Ä—è–≤—à–∏–º" –æ—Ä–¥–µ—Ä–∞–º ---
    final_open_positions_value = 0
    total_open_size_coin = 0
    total_open_cost_usd = 0
    next_tp_price = 0

    if open_orders:
        for order in open_orders:
            total_open_size_coin += order['size_coin']
            total_open_cost_usd += order['size_usd']
        
        final_open_positions_value = total_open_size_coin * data['close'][-1]
        
        oldest_order = open_orders[0]
        if direction == 'Long':
            next_tp_price = oldest_order['price'] * (1 + take_profit_percent)
        else:
            next_tp_price = oldest_order['price'] * (1 - take_profit_percent)

    final_cash = cash + final_open_positions_value
    final_state = {
        'open_orders_count': len(open_orders),
        'position_value': final_open_positions_value,
        'avg_price': (total_open_cost_usd / total_open_size_coin) if total_open_size_coin > 0 else 0,
        'next_tp_price': next_tp_price
    }
    
    return final_cash, completed_cycles, final_state


# --- 2. –§—É–Ω–∫—Ü–∏–∏ –∏ UI ---
@st.cache_data
def fetch_data(exchange_name, symbol, timeframe, start_date):
    try:
        exchange = getattr(ccxt, exchange_name)()
        since = int(start_date.replace(tzinfo=timezone.utc).timestamp() * 1000)
        
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏–∫–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö ---
        all_ohlcv = []
        while True:
            ohlcv = exchange.fetch_ohlcv(symbol, timeframe, since=since, limit=1000)
            if not ohlcv:
                break
            all_ohlcv.extend(ohlcv)
            since = ohlcv[-1][0] + 1 # –û–±–Ω–æ–≤–ª—è–µ–º 'since' –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

        if not all_ohlcv: return None

        df = pd.DataFrame(all_ohlcv, columns=['datetime', 'open', 'high', 'low', 'close', 'volume'])
        df['datetime'] = pd.to_datetime(df['datetime'], unit='ms')
        df.set_index('datetime', inplace=True)
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

st.set_page_config(layout="wide", initial_sidebar_state="expanded")
st.title("‚ö°Ô∏è –°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä—ã–π –±—ç–∫—Ç–µ—Å—Ç–µ—Ä –¥–ª—è —Å–µ—Ç–æ—á–Ω–æ–π DCA-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (FIFO)")

with st.sidebar:
    st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ç–∫—Ç–µ—Å—Ç–∞")
    direction = st.radio("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", ["Long", "Short"])
    exchange = st.selectbox("–ë–∏—Ä–∂–∞", ["okx", "bybit", "binance", "bitget"])
    symbol_ccxt = st.text_input("–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (—Ç–∏–∫–µ—Ä CCXT)", "BTC/USDT")
    start_date = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", datetime(2023, 1, 1))
    end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", datetime.now())
    initial_cash = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª", value=10000.0)

    st.header("üõ†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    initial_order_size = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä ($)", value=100.0)
    safety_order_size = st.number_input("–°—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä ($)", value=100.0)
    volume_multiplier = st.number_input("–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å—É–º–º—ã", min_value=1.0, value=1.03, format="%.2f")
    safety_orders_count = st.number_input("–ú–∞–∫—Å. –∫–æ–ª-–≤–æ –°–û", min_value=1, value=100)
    price_step_percent = st.number_input("–®–∞–≥ —Ü–µ–Ω—ã (%)", min_value=0.01, value=0.1, format="%.2f")
    price_step_multiplier = st.number_input("–ú–Ω–æ–∂–∏—Ç–µ–ª—å —à–∞–≥–∞ —Ü–µ–Ω—ã", min_value=1.0, value=1.01, format="%.2f")
    take_profit_percent = st.number_input("Take profit (%)", min_value=0.01, value=0.5, format="%.2f")

if st.sidebar.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç"):
    start_datetime = datetime.combine(start_date, datetime.min.time())
    end_datetime = datetime.combine(end_date, datetime.max.time())
    
    params = { 'direction': direction, 'initial_cash': initial_cash, 'initial_order_size': initial_order_size, 'safety_order_size': safety_order_size, 'volume_multiplier': volume_multiplier, 'safety_orders_count': safety_orders_count, 'price_step_percent': price_step_percent, 'price_step_multiplier': price_step_multiplier, 'take_profit_percent': take_profit_percent, }

    with st.spinner(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol_ccxt} —Å {exchange}..."):
        data_df = fetch_data(exchange, symbol_ccxt, '1d', start_datetime)

    if data_df is not None and not data_df.empty:
        data_df = data_df.loc[start_datetime:end_datetime]
        st.success(f"–î–∞–Ω–Ω—ã–µ —Å {start_datetime.date()} –ø–æ {end_datetime.date()} –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        
        final_cash, completed_cycles, final_state = run_fast_backtest(data_df, params)
        
        st.header(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {symbol_ccxt}")
        pnl = final_cash - initial_cash
        
        col1, col2, col3 = st.columns(3)
        col1.metric("–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª", f"${initial_cash:,.2f}")
        col2.metric("–ö–æ–Ω–µ—á–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª", f"${final_cash:,.2f}", f"{pnl:,.2f} $")
        col3.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ü–∏–∫–ª–æ–≤", len(completed_cycles))

        st.header("üèÅ –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞")
        if final_state['open_orders_count'] > 0:
            st.warning(f"–ë–æ—Ç –∑–∞—Å—Ç—Ä—è–ª –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫ –∫–æ–Ω—Ü—É –ø–µ—Ä–∏–æ–¥–∞.", icon="‚ö†Ô∏è")
            col1, col2, col3, col4 = st.columns(4)
            col1.metric("–û—Ç–∫—Ä—ã—Ç–æ –æ—Ä–¥–µ—Ä–æ–≤", f"{final_state['open_orders_count']} —à—Ç.")
            col2.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ ($)", f"${final_state['position_value']:,.2f}")
            col3.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ ($)", f"${final_state['avg_price']:,.2f}")
            col4.metric("–¶–µ–Ω–∞ –¥–ª—è —Å–ª–µ–¥. TP ($)", f"${final_state['next_tp_price']:,.2f}")
        else:
            st.success("–í—Å–µ —Ü–∏–∫–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç.", icon="‚úÖ")

        st.header("üìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–∏–∫–ª—ã (FIFO)")
        if completed_cycles:
            log_df = pd.DataFrame(completed_cycles)
            st.dataframe(log_df.style.format({"pnl": "${:,.2f}"}))
            total_pnl = log_df['pnl'].sum()
            st.metric("–°—É–º–º–∞—Ä–Ω—ã–π –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç", f"${total_pnl:,.2f}")
        else:
            st.info("–ó–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –Ω–µ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞.")
